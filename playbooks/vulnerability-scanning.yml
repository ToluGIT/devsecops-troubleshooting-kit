---
# Vulnerability Scanning and Assessment Playbook
# This playbook performs security scans and vulnerability assessments

- name: Vulnerability Assessment and Security Scanning
  hosts: all
  become: yes
  vars:
    scan_type: "{{ scan_type | default('comprehensive') }}"  # quick, standard, comprehensive
    output_dir: "/tmp/security-scans"
    scan_timestamp: "{{ ansible_date_time.epoch }}"
    report_format: "{{ report_format | default('html') }}"  # html, json, xml
    
    # Scanner configurations
    nmap_enabled: "{{ nmap_enabled | default(true) }}"
    openvas_enabled: "{{ openvas_enabled | default(false) }}"
    lynis_enabled: "{{ lynis_enabled | default(true) }}"
    clamav_enabled: "{{ clamav_enabled | default(true) }}"
    chkrootkit_enabled: "{{ chkrootkit_enabled | default(true) }}"
    rkhunter_enabled: "{{ rkhunter_enabled | default(true) }}"
    
  pre_tasks:
    - name: Validate scan type
      fail:
        msg: "Invalid scan type. Must be one of: quick, standard, comprehensive"
      when: scan_type not in ['quick', 'standard', 'comprehensive']
      
    - name: Create scan output directory
      file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'
        
    - name: Create scan subdirectories
      file:
        path: "{{ output_dir }}/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - network
        - system
        - malware
        - configuration
        - reports
        
    - name: Log scan start
      lineinfile:
        path: "{{ output_dir }}/scan.log"
        line: "{{ ansible_date_time.iso8601 }} - Starting {{ scan_type }} vulnerability scan"
        create: yes
        mode: '0644'
        
  tasks:
    # Install scanning tools
    - name: Install vulnerability scanning tools
      package:
        name: "{{ item }}"
        state: present
      loop:
        - nmap
        - lynis
        - clamav
        - clamav-daemon
        - clamav-freshclam
        - chkrootkit
        - rkhunter
        - netstat-nat
        - lsof
        - unhide
        - debsums
      ignore_errors: yes
      
    # Network vulnerability scanning
    - name: Network port scan (internal)
      shell: |
        nmap -sS -O -A -T4 127.0.0.1 > {{ output_dir }}/network/localhost-scan.txt 2>&1
        nmap -sU --top-ports 100 127.0.0.1 > {{ output_dir }}/network/localhost-udp-scan.txt 2>&1
      when: nmap_enabled
      ignore_errors: yes
      
    - name: Network service enumeration
      shell: |
        netstat -tulpn > {{ output_dir }}/network/listening-services.txt 2>&1
        ss -tulpn > {{ output_dir }}/network/socket-statistics.txt 2>&1
        lsof -i > {{ output_dir }}/network/network-connections.txt 2>&1
      ignore_errors: yes
      
    - name: Check for suspicious network connections
      shell: |
        netstat -an | grep ESTABLISHED | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr > {{ output_dir }}/network/connection-summary.txt
        ss -tuln | grep :22 > {{ output_dir }}/network/ssh-connections.txt || echo "No SSH connections" > {{ output_dir }}/network/ssh-connections.txt
      ignore_errors: yes
      
    # System configuration scanning with Lynis
    - name: Run Lynis security audit
      shell: |
        lynis audit system --quick > {{ output_dir }}/system/lynis-quick.txt 2>&1
      when: lynis_enabled and scan_type == 'quick'
      ignore_errors: yes
      
    - name: Run comprehensive Lynis audit
      shell: |
        lynis audit system > {{ output_dir }}/system/lynis-full.txt 2>&1
        cp /var/log/lynis.log {{ output_dir }}/system/lynis-detailed.log 2>/dev/null || true
      when: lynis_enabled and scan_type in ['standard', 'comprehensive']
      ignore_errors: yes
      
    # File system and integrity checking
    - name: Check file system permissions
      shell: |
        find /etc -type f -perm /o+w -exec ls -la {} \; > {{ output_dir }}/system/world-writable-etc.txt 2>&1
        find /home -type f -perm /o+w -exec ls -la {} \; > {{ output_dir }}/system/world-writable-home.txt 2>&1
        find / -type f -perm +6000 -exec ls -la {} \; > {{ output_dir }}/system/suid-sgid-files.txt 2>&1
      ignore_errors: yes
      
    - name: Check for unowned files
      shell: |
        find /home -nouser -o -nogroup > {{ output_dir }}/system/unowned-files.txt 2>&1
        find /tmp -type f -atime +7 > {{ output_dir }}/system/old-tmp-files.txt 2>&1
      ignore_errors: yes
      
    # Package and system integrity
    - name: Check package integrity (Debian/Ubuntu)
      shell: |
        dpkg --verify > {{ output_dir }}/system/package-integrity-dpkg.txt 2>&1
        debsums -c > {{ output_dir }}/system/package-integrity-debsums.txt 2>&1
      when: ansible_os_family == "Debian"
      ignore_errors: yes
      
    - name: Check package integrity (RedHat/CentOS)
      shell: |
        rpm -Va > {{ output_dir }}/system/package-integrity-rpm.txt 2>&1
      when: ansible_os_family == "RedHat"
      ignore_errors: yes
      
    # Malware scanning
    - name: Update ClamAV virus definitions
      shell: |
        freshclam > {{ output_dir }}/malware/freshclam-update.txt 2>&1
      when: clamav_enabled
      ignore_errors: yes
      
    - name: Quick malware scan (important directories)
      shell: |
        clamscan -r --bell -i /home > {{ output_dir }}/malware/home-scan.txt 2>&1 &
        clamscan -r --bell -i /tmp > {{ output_dir }}/malware/tmp-scan.txt 2>&1 &
        clamscan -r --bell -i /var/www > {{ output_dir }}/malware/www-scan.txt 2>&1 &
        wait
      when: clamav_enabled and scan_type == 'quick'
      ignore_errors: yes
      
    - name: Comprehensive malware scan
      shell: |
        clamscan -r --bell -i / --exclude-dir=/proc --exclude-dir=/sys --exclude-dir=/dev > {{ output_dir }}/malware/full-system-scan.txt 2>&1
      when: clamav_enabled and scan_type == 'comprehensive'
      ignore_errors: yes
      async: 3600
      poll: 30
      
    # Rootkit detection
    - name: Run chkrootkit scan
      shell: |
        chkrootkit > {{ output_dir }}/malware/chkrootkit-scan.txt 2>&1
      when: chkrootkit_enabled
      ignore_errors: yes
      
    - name: Run rkhunter scan
      shell: |
        rkhunter --update > {{ output_dir }}/malware/rkhunter-update.txt 2>&1
        rkhunter --check --skip-keypress --report-warnings-only > {{ output_dir }}/malware/rkhunter-scan.txt 2>&1
      when: rkhunter_enabled
      ignore_errors: yes
      
    # Process and service analysis
    - name: Analyze running processes
      shell: |
        ps aux --sort=-%cpu | head -20 > {{ output_dir }}/system/top-cpu-processes.txt
        ps aux --sort=-%mem | head -20 > {{ output_dir }}/system/top-memory-processes.txt
        pstree -p > {{ output_dir }}/system/process-tree.txt
        lsof +L1 > {{ output_dir }}/system/deleted-open-files.txt 2>&1
      ignore_errors: yes
      
    - name: Check for suspicious processes
      shell: |
        ps aux | grep -E '(nc|netcat|ncat)' > {{ output_dir }}/system/netcat-processes.txt || echo "No netcat processes found" > {{ output_dir }}/system/netcat-processes.txt
        ps aux | grep -E '(wget|curl).*\|.*sh' > {{ output_dir }}/system/suspicious-download-processes.txt || echo "No suspicious download processes" > {{ output_dir }}/system/suspicious-download-processes.txt
        lsof -i | grep -E '(ESTABLISHED|LISTEN)' | grep -v ':22\|:80\|:443' > {{ output_dir }}/system/unusual-network-processes.txt || echo "No unusual network processes" > {{ output_dir }}/system/unusual-network-processes.txt
      ignore_errors: yes
      
    # Log analysis
    - name: Analyze authentication logs
      shell: |
        grep -i "failed\|failure\|invalid" /var/log/auth.log | tail -100 > {{ output_dir }}/system/failed-logins.txt 2>&1 || echo "No auth.log found" > {{ output_dir }}/system/failed-logins.txt
        grep -i "accepted\|session opened" /var/log/auth.log | tail -50 > {{ output_dir }}/system/successful-logins.txt 2>&1 || echo "No successful logins found" > {{ output_dir }}/system/successful-logins.txt
        last -20 > {{ output_dir }}/system/recent-logins.txt 2>&1
        lastb -20 > {{ output_dir }}/system/bad-logins.txt 2>&1 || echo "No bad login attempts" > {{ output_dir }}/system/bad-logins.txt
      ignore_errors: yes
      
    - name: Check system logs for anomalies
      shell: |
        journalctl --since "24 hours ago" --priority=err > {{ output_dir }}/system/recent-errors.txt 2>&1
        journalctl --since "24 hours ago" --grep="segfault\|kernel.*error\|out of memory" > {{ output_dir }}/system/system-issues.txt 2>&1 || echo "No critical system issues found" > {{ output_dir }}/system/system-issues.txt
        dmesg | grep -i "error\|fail\|warning" | tail -50 > {{ output_dir }}/system/kernel-messages.txt 2>&1
      ignore_errors: yes
      
    # Configuration assessment
    - name: Check critical configuration files
      shell: |
        # SSH configuration
        grep -E "PermitRootLogin|PasswordAuthentication|PermitEmptyPasswords" /etc/ssh/sshd_config > {{ output_dir }}/configuration/ssh-config.txt 2>&1
        
        # Sudo configuration
        cat /etc/sudoers > {{ output_dir }}/configuration/sudo-config.txt 2>&1
        
        # Password policy
        grep -E "PASS_MAX_DAYS|PASS_MIN_DAYS|PASS_WARN_AGE" /etc/login.defs > {{ output_dir }}/configuration/password-policy.txt 2>&1
        
        # Network configuration
        cat /etc/hosts > {{ output_dir }}/configuration/hosts-file.txt 2>&1
        ip route show > {{ output_dir }}/configuration/routing-table.txt 2>&1
        
        # Firewall status
        iptables -L -n > {{ output_dir }}/configuration/iptables-rules.txt 2>&1 || echo "iptables not available" > {{ output_dir }}/configuration/iptables-rules.txt
        ufw status verbose > {{ output_dir }}/configuration/ufw-status.txt 2>&1 || echo "ufw not available" > {{ output_dir }}/configuration/ufw-status.txt
      ignore_errors: yes
      
    # Check for default credentials and weak configurations
    - name: Check for default/weak configurations
      shell: |
        # Check for default passwords in common files
        grep -r "password.*admin\|password.*password\|password.*123" /etc/ > {{ output_dir }}/configuration/default-passwords.txt 2>&1 || echo "No default passwords found in /etc/" > {{ output_dir }}/configuration/default-passwords.txt
        
        # Check for weak SSH keys
        find /home -name "id_rsa*" -o -name "id_dsa*" -exec ssh-keygen -l -f {} \; > {{ output_dir }}/configuration/ssh-keys.txt 2>&1 || echo "No SSH keys found" > {{ output_dir }}/configuration/ssh-keys.txt
        
        # Check for world-readable sensitive files
        find /etc -name "passwd*" -o -name "shadow*" -o -name "*key*" -perm /o+r > {{ output_dir }}/configuration/readable-sensitive-files.txt 2>&1
      ignore_errors: yes
      
    # Web application scanning (if web server present)
    - name: Check for web servers and scan
      shell: |
        if pgrep -f "apache2\|httpd\|nginx" > /dev/null; then
          echo "Web server detected" > {{ output_dir }}/network/web-server-info.txt
          netstat -tlpn | grep ":80\|:443" >> {{ output_dir }}/network/web-server-info.txt
          
          # Basic web vulnerability checks
          curl -I http://localhost 2>/dev/null | grep -i server >> {{ output_dir }}/network/web-server-info.txt || echo "Could not determine web server" >> {{ output_dir }}/network/web-server-info.txt
          
          # Check for common vulnerable paths
          for path in /admin /phpmyadmin /wp-admin /.git; do
            curl -s -o /dev/null -w "%{http_code} $path\n" http://localhost$path >> {{ output_dir }}/network/web-paths.txt 2>&1
          done
        else
          echo "No web server detected" > {{ output_dir }}/network/web-server-info.txt
        fi
      ignore_errors: yes
      
  post_tasks:
    # Generate comprehensive report
    - name: Generate vulnerability assessment report
      shell: |
        cat > {{ output_dir }}/reports/vulnerability-report-{{ scan_timestamp }}.txt << 'EOF'
        ================================================
        VULNERABILITY ASSESSMENT REPORT
        ================================================
        Scan Type: {{ scan_type }}
        Timestamp: {{ ansible_date_time.iso8601 }}
        Host: {{ inventory_hostname }}
        OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
        
        SUMMARY OF FINDINGS:
        ==================
        
        Network Security:
        - Port scan results: {{ output_dir }}/network/localhost-scan.txt
        - Listening services: {{ output_dir }}/network/listening-services.txt
        - Network connections: {{ output_dir }}/network/network-connections.txt
        
        System Security:
        - Lynis audit: {{ output_dir }}/system/lynis-*.txt
        - File permissions: {{ output_dir }}/system/world-writable-*.txt
        - SUID/SGID files: {{ output_dir }}/system/suid-sgid-files.txt
        - Package integrity: {{ output_dir }}/system/package-integrity-*.txt
        
        Malware Detection:
        - ClamAV scan: {{ output_dir }}/malware/*-scan.txt
        - Rootkit scan: {{ output_dir }}/malware/chkrootkit-scan.txt
        - RKHunter scan: {{ output_dir }}/malware/rkhunter-scan.txt
        
        Configuration Assessment:
        - SSH configuration: {{ output_dir }}/configuration/ssh-config.txt
        - Sudo configuration: {{ output_dir }}/configuration/sudo-config.txt
        - Password policy: {{ output_dir }}/configuration/password-policy.txt
        - Firewall rules: {{ output_dir }}/configuration/*rules.txt
        
        Process Analysis:
        - Running processes: {{ output_dir }}/system/top-*-processes.txt
        - Suspicious processes: {{ output_dir }}/system/suspicious-*.txt
        - Network processes: {{ output_dir }}/system/unusual-network-processes.txt
        
        Log Analysis:
        - Failed logins: {{ output_dir }}/system/failed-logins.txt
        - Recent errors: {{ output_dir }}/system/recent-errors.txt
        - System issues: {{ output_dir }}/system/system-issues.txt
        
        RECOMMENDATIONS:
        ==============
        1. Review all identified vulnerabilities
        2. Update system packages and apply security patches
        3. Configure firewall rules appropriately
        4. Implement strong authentication mechanisms
        5. Monitor logs regularly for suspicious activity
        6. Schedule regular vulnerability scans
        7. Implement file integrity monitoring
        8. Review and harden service configurations
        
        For detailed findings, review individual scan files in:
        {{ output_dir }}/
        
        EOF
      
    - name: Create scan summary
      shell: |
        echo "VULNERABILITY SCAN SUMMARY" > {{ output_dir }}/reports/scan-summary.txt
        echo "=========================" >> {{ output_dir }}/reports/scan-summary.txt
        echo "Scan completed: {{ ansible_date_time.iso8601 }}" >> {{ output_dir }}/reports/scan-summary.txt
        echo "Host: {{ inventory_hostname }}" >> {{ output_dir }}/reports/scan-summary.txt
        echo "Scan type: {{ scan_type }}" >> {{ output_dir }}/reports/scan-summary.txt
        echo "" >> {{ output_dir }}/reports/scan-summary.txt
        
        # Count findings
        echo "FINDINGS SUMMARY:" >> {{ output_dir }}/reports/scan-summary.txt
        echo "=================" >> {{ output_dir }}/reports/scan-summary.txt
        
        # Network findings
        LISTENING_PORTS=$(wc -l < {{ output_dir }}/network/listening-services.txt)
        echo "Listening services: $LISTENING_PORTS" >> {{ output_dir }}/reports/scan-summary.txt
        
        # File permission issues
        WRITABLE_FILES=$(wc -l < {{ output_dir }}/system/world-writable-etc.txt)
        echo "World-writable files in /etc: $WRITABLE_FILES" >> {{ output_dir }}/reports/scan-summary.txt
        
        SUID_FILES=$(wc -l < {{ output_dir }}/system/suid-sgid-files.txt)
        echo "SUID/SGID files: $SUID_FILES" >> {{ output_dir }}/reports/scan-summary.txt
        
        # Authentication issues
        FAILED_LOGINS=$(wc -l < {{ output_dir }}/system/failed-logins.txt)
        echo "Failed login attempts: $FAILED_LOGINS" >> {{ output_dir }}/reports/scan-summary.txt
        
        echo "" >> {{ output_dir }}/reports/scan-summary.txt
        echo "Full report: {{ output_dir }}/reports/vulnerability-report-{{ scan_timestamp }}.txt" >> {{ output_dir }}/reports/scan-summary.txt
        
    - name: Set secure permissions on scan results
      file:
        path: "{{ output_dir }}"
        mode: '0750'
        recurse: yes
        
    - name: Log scan completion
      lineinfile:
        path: "{{ output_dir }}/scan.log"
        line: "{{ ansible_date_time.iso8601 }} - {{ scan_type }} vulnerability scan completed"
        
    - name: Display scan results
      debug:
        msg: |
          Vulnerability Scan Completed
          ===========================
          Scan Type: {{ scan_type }}
          Results Directory: {{ output_dir }}
          
          Key Files:
          - Summary: {{ output_dir }}/reports/scan-summary.txt
          - Full Report: {{ output_dir }}/reports/vulnerability-report-{{ scan_timestamp }}.txt
          - Scan Log: {{ output_dir }}/scan.log
          
          Review the findings and implement necessary security measures.
          
          Next Steps:
          1. Review {{ output_dir }}/reports/scan-summary.txt
          2. Address high-priority vulnerabilities
          3. Schedule regular scans
          4. Implement continuous monitoring